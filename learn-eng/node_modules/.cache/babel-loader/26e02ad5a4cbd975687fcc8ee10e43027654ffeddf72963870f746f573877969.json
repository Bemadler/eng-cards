{"ast":null,"code":"var _jsxFileName = \"/Users/bermetakerova/Documents/Codding/GitHub/eng-cards/learn-eng/src/components/allwordsbutton/AllWordsButton.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n\n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default WordList;\n\nimport React, { useState } from 'react';\nimport styles from './NewWord.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewWord = ({\n  onAddWord\n}) => {\n  _s();\n  const [newWord, setNewWord] = useState({\n    english: '',\n    transcription: '',\n    russian: '',\n    tag: ''\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewWord(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Проверяем, что все поля заполнены\n    if (newWord.english && newWord.transcription && newWord.russian && newWord.tag) {\n      // Если все поля заполнены, добавляем новое слово в локальное хранилище\n      const words = JSON.parse(localStorage.getItem('words')) || [];\n      const updatedWords = [...words, newWord];\n      localStorage.setItem('words', JSON.stringify(updatedWords));\n\n      // Вызываем переданный в пропсах колбэк для обновления списка слов в родительском компоненте\n      onAddWord(newWord);\n\n      // Сбрасываем состояние формы\n      setNewWord({\n        english: '',\n        transcription: '',\n        russian: '',\n        tag: ''\n      });\n    } else {\n      // Если какое-то поле не заполнено, вы можете показать сообщение об ошибке или сделать что-то еще\n      console.log('Пожалуйста, заполните все поля');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.NewWord,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u043E\\u0432\\u043E\\u0435 \\u0441\\u043B\\u043E\\u0432\\u043E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"english\",\n        value: newWord.english,\n        onChange: handleChange,\n        placeholder: \"\\u0441\\u043B\\u043E\\u0432\\u043E \\u043D\\u0430 \\u0430\\u043D\\u0433\\u043B.\\u044F\\u0437\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"transcription\",\n        value: newWord.transcription,\n        onChange: handleChange,\n        placeholder: \"\\u0442\\u0440\\u0430\\u043D\\u0441\\u043A\\u0440\\u0438\\u043F\\u0446\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"russian\",\n        value: newWord.russian,\n        onChange: handleChange,\n        placeholder: \"\\u043F\\u0435\\u0440\\u0435\\u0432\\u043E\\u0434\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"tag\",\n        value: newWord.tag,\n        onChange: handleChange,\n        placeholder: \"\\u0442\\u0435\\u0433\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.button,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(NewWord, \"+bTIwQoX4YRotXgGT5Xn/og3mQY=\");\n_c = NewWord;\nexport default NewWord;\nvar _c;\n$RefreshReg$(_c, \"NewWord\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","NewWord","onAddWord","_s","newWord","setNewWord","english","transcription","russian","tag","handleChange","e","name","value","target","prevState","handleSubmit","preventDefault","words","JSON","parse","localStorage","getItem","updatedWords","setItem","stringify","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","button","_c","$RefreshReg$"],"sources":["/Users/bermetakerova/Documents/Codding/GitHub/eng-cards/learn-eng/src/components/allwordsbutton/AllWordsButton.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n\n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default WordList;\n\nimport React, { useState } from 'react';\nimport styles from './NewWord.module.css';\n\nconst NewWord = ({ onAddWord }) => {\n  const [newWord, setNewWord] = useState({\n    english: '',\n    transcription: '',\n    russian: '',\n    tag: ''\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setNewWord(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    // Проверяем, что все поля заполнены\n    if (newWord.english && newWord.transcription && newWord.russian && newWord.tag) {\n      // Если все поля заполнены, добавляем новое слово в локальное хранилище\n      const words = JSON.parse(localStorage.getItem('words')) || [];\n      const updatedWords = [...words, newWord];\n      localStorage.setItem('words', JSON.stringify(updatedWords));\n\n      // Вызываем переданный в пропсах колбэк для обновления списка слов в родительском компоненте\n      onAddWord(newWord);\n      \n      // Сбрасываем состояние формы\n      setNewWord({\n        english: '',\n        transcription: '',\n        russian: '',\n        tag: ''\n      });\n    } else {\n      // Если какое-то поле не заполнено, вы можете показать сообщение об ошибке или сделать что-то еще\n      console.log('Пожалуйста, заполните все поля');\n    }\n  };\n\n  return (\n    <div className={styles.NewWord}>\n      <h2>Добавить новое слово</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"english\"\n          value={newWord.english}\n          onChange={handleChange}\n          placeholder=\"слово на англ.яз\"\n        />\n        <input\n          type=\"text\"\n          name=\"transcription\"\n          value={newWord.transcription}\n          onChange={handleChange}\n          placeholder=\"транскрипция\"\n        />\n        <input\n          type=\"text\"\n          name=\"russian\"\n          value={newWord.russian}\n          onChange={handleChange}\n          placeholder=\"перевод\"\n        />\n        <input\n          type=\"text\"\n          name=\"tag\"\n          value={newWord.tag}\n          onChange={handleChange}\n          placeholder=\"тег\"\n        />\n        <button type=\"submit\" className={styles.button}>Добавить</button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewWord;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}