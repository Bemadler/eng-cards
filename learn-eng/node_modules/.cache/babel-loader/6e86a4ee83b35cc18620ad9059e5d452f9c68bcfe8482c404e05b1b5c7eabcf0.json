{"ast":null,"code":"var _jsxFileName = \"/Users/bermetakerova/Documents/Codding/GitHub/eng-cards/learn-eng/src/components/allwordsbutton/AllWordsButton.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n\n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default WordList;\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './AllWordsButton.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordList = () => {\n  _s();\n  const [wordList, setWordList] = useState([]);\n  useEffect(() => {\n    fetchWordList();\n  }, []);\n  const fetchWordList = async () => {\n    try {\n      const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n      if (!response.ok) {\n        throw new Error('Failed to fetch word list');\n      }\n      const data = await response.json();\n      setWordList(data);\n    } catch (error) {\n      console.error('Error fetching word list:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.AddWordBox,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.AddWordHeader,\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0441\\u043B\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: styles.wordListTable,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0421\\u043B\\u043E\\u0432\\u043E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0422\\u0440\\u0430\\u043D\\u0441\\u043A\\u0440\\u0438\\u043F\\u0446\\u0438\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u041F\\u0435\\u0440\\u0435\\u0432\\u043E\\u0434\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u0422\\u0435\\u0433\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: wordList.map(word => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.english\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.transcription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.russian\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, word.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(WordList, \"nV25AjB16LpdV8mVMHCwVEfTFhE=\");\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useState","useEffect","styles","jsxDEV","_jsxDEV","WordList","_s","wordList","setWordList","fetchWordList","response","fetch","ok","Error","data","json","error","console","className","AddWordBox","children","AddWordHeader","fileName","_jsxFileName","lineNumber","columnNumber","wordListTable","map","word","english","transcription","russian","tag","id","_c","$RefreshReg$"],"sources":["/Users/bermetakerova/Documents/Codding/GitHub/eng-cards/learn-eng/src/components/allwordsbutton/AllWordsButton.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n\n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default WordList;\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './AllWordsButton.module.css'; \n\nconst WordList = () => {\n  const [wordList, setWordList] = useState([]);\n\n  useEffect(() => {\n    fetchWordList();\n  }, []);\n\n  const fetchWordList = async () => {\n    try {\n      const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n      if (!response.ok) {\n        throw new Error('Failed to fetch word list');\n      }\n      const data = await response.json();\n      setWordList(data);\n    } catch (error) {\n      console.error('Error fetching word list:', error);\n    }\n  };\n\n  return (\n    <div className={styles.AddWordBox}>\n      <h2 className={styles.AddWordHeader}>Список слов</h2>\n      <table className={styles.wordListTable}>\n        <thead>\n          <tr>\n            <th>Слово</th>\n            <th>Транскрипция</th>\n            <th>Перевод</th>\n            <th>Тег</th>\n          </tr>\n        </thead>\n        <tbody>\n          {wordList.map((word) => (\n            <tr key={word.id}>\n              <td>{word.english}</td>\n              <td>{word.transcription}</td>\n              <td>{word.russian}</td>\n              <td>{word.tag}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default WordList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}