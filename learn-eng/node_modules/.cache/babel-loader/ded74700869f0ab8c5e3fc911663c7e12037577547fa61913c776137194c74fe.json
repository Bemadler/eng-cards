{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n// export default WordList;\nimport React,{useState,useEffect}from'react';import styles from'./AllWordsButton.module.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WordList=()=>{const[wordList,setWordList]=useState([]);useEffect(()=>{fetchWordList();},[]);const fetchWordList=async()=>{try{const response=await fetch('https://itgirlschool.justmakeit.ru/api/words');if(!response.ok){throw new Error('Failed to fetch word list');}const data=await response.json();setWordList(data);}catch(error){console.error('Error fetching word list:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:styles.AddWordBox,children:[/*#__PURE__*/_jsx(\"h2\",{className:styles.AddWordHeader,children:\"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0441\\u043B\\u043E\\u0432\"}),/*#__PURE__*/_jsxs(\"table\",{className:styles.wordListTable,children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"\\u0421\\u043B\\u043E\\u0432\\u043E\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0422\\u0440\\u0430\\u043D\\u0441\\u043A\\u0440\\u0438\\u043F\\u0446\\u0438\\u044F\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u041F\\u0435\\u0440\\u0435\\u0432\\u043E\\u0434\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0422\\u0435\\u0433\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:wordList.map(word=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:word.english}),/*#__PURE__*/_jsx(\"td\",{children:word.transcription}),/*#__PURE__*/_jsx(\"td\",{children:word.russian}),/*#__PURE__*/_jsx(\"td\",{children:word.tags})]},word.id))})]})]});};export default WordList;","map":{"version":3,"names":["React","useState","useEffect","styles","jsx","_jsx","jsxs","_jsxs","WordList","wordList","setWordList","fetchWordList","response","fetch","ok","Error","data","json","error","console","className","AddWordBox","children","AddWordHeader","wordListTable","map","word","english","transcription","russian","tags","id"],"sources":["/Users/bermetakerova/Documents/Codding/GitHub/eng-cards/learn-eng/src/components/allwordsbutton/AllWordsButton.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import styles from './AllWordsButton.module.css'; \n\n// const WordList = () => {\n//   const [wordList, setWordList] = useState([]);\n\n//   useEffect(() => {\n//     fetchWordList();\n//   }, []);\n\n//   const fetchWordList = async () => {\n//     try {\n//       const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch word list');\n//       }\n//       const data = await response.json();\n//       setWordList(data);\n//     } catch (error) {\n//       console.error('Error fetching word list:', error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.AddWordBox}>\n//       <h2 className={styles.AddWordHeader}>Список слов</h2>\n//       <table className={styles.wordListTable}>\n//         <thead>\n//           <tr>\n//             <th>Слово</th>\n//             <th>Транскрипция</th>\n//             <th>Перевод</th>\n//             <th>Тег</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {wordList.map((word, index) => (\n//             <tr key={index}>\n//               <td>{word.english}</td>\n//               <td>{word.transcription}</td>\n//               <td>{word.russian}</td>\n//               <td>{word.tags}</td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default WordList;\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './AllWordsButton.module.css'; \n\nconst WordList = () => {\n  const [wordList, setWordList] = useState([]);\n\n  useEffect(() => {\n    fetchWordList();\n  }, []);\n\n  const fetchWordList = async () => {\n    try {\n      const response = await fetch('https://itgirlschool.justmakeit.ru/api/words');\n      if (!response.ok) {\n        throw new Error('Failed to fetch word list');\n      }\n      const data = await response.json();\n      setWordList(data);\n    } catch (error) {\n      console.error('Error fetching word list:', error);\n    }\n  };\n\n  return (\n    <div className={styles.AddWordBox}>\n      <h2 className={styles.AddWordHeader}>Список слов</h2>\n      <table className={styles.wordListTable}>\n        <thead>\n          <tr>\n            <th>Слово</th>\n            <th>Транскрипция</th>\n            <th>Перевод</th>\n            <th>Тег</th>\n          </tr>\n        </thead>\n        <tbody>\n          {wordList.map((word) => (\n            <tr key={word.id}>\n              <td>{word.english}</td>\n              <td>{word.transcription}</td>\n              <td>{word.russian}</td>\n              <td>{word.tags}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default WordList;\n"],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjD,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACdS,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CAC5E,GAAI,CAACD,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCP,WAAW,CAACM,IAAI,CAAC,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CACF,CAAC,CAED,mBACEX,KAAA,QAAKa,SAAS,CAAEjB,MAAM,CAACkB,UAAW,CAAAC,QAAA,eAChCjB,IAAA,OAAIe,SAAS,CAAEjB,MAAM,CAACoB,aAAc,CAAAD,QAAA,CAAC,+DAAW,CAAI,CAAC,cACrDf,KAAA,UAAOa,SAAS,CAAEjB,MAAM,CAACqB,aAAc,CAAAF,QAAA,eACrCjB,IAAA,UAAAiB,QAAA,cACEf,KAAA,OAAAe,QAAA,eACEjB,IAAA,OAAAiB,QAAA,CAAI,gCAAK,CAAI,CAAC,cACdjB,IAAA,OAAAiB,QAAA,CAAI,0EAAY,CAAI,CAAC,cACrBjB,IAAA,OAAAiB,QAAA,CAAI,4CAAO,CAAI,CAAC,cAChBjB,IAAA,OAAAiB,QAAA,CAAI,oBAAG,CAAI,CAAC,EACV,CAAC,CACA,CAAC,cACRjB,IAAA,UAAAiB,QAAA,CACGb,QAAQ,CAACgB,GAAG,CAAEC,IAAI,eACjBnB,KAAA,OAAAe,QAAA,eACEjB,IAAA,OAAAiB,QAAA,CAAKI,IAAI,CAACC,OAAO,CAAK,CAAC,cACvBtB,IAAA,OAAAiB,QAAA,CAAKI,IAAI,CAACE,aAAa,CAAK,CAAC,cAC7BvB,IAAA,OAAAiB,QAAA,CAAKI,IAAI,CAACG,OAAO,CAAK,CAAC,cACvBxB,IAAA,OAAAiB,QAAA,CAAKI,IAAI,CAACI,IAAI,CAAK,CAAC,GAJbJ,IAAI,CAACK,EAKV,CACL,CAAC,CACG,CAAC,EACH,CAAC,EACL,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}